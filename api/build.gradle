plugins {
  id 'eclipse'
  id 'java-library'
  id 'maven-publish'
  id 'com.github.johnrengelman.shadow' version '5.2.0'
  id "io.swagger.core.v3.swagger-gradle-plugin" version "2.1.2"
}

dependencies {
    implementation(
        project(":common"),
        project(":jersey"),
        project(":bhive"),
    )
    api(
        'io.swagger.core.v3:swagger-annotations:2.1.2',
    )
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

build.dependsOn shadowJar
build.dependsOn resolve

shadowJar {
	classifier = ''
    baseName = 'bdeploy-api'
}

resolve {
    outputFileName = 'BDeployAPI'
    outputFormat = 'YAML'
    classpath = sourceSets.main.runtimeClasspath
    outputDir = file("${buildDir}/openapi")
    readAllResources = false
    resourceClasses = [
        'io.bdeploy.api.remote.v1.PublicRootResource',
    ]
}

task allSourcesJar(type: Jar, dependsOn: classes) {
	group = 'build'
	classifier = 'sources'
	from { collectSourceSetsIncludingSubmodules(project) } // we return here a closure to do this lazy, after all projects are configured by gradle
}

artifacts {
	archives allSourcesJar
}

shadowJar.dependsOn allSourcesJar

publishing {
	publications {
		shadow(MavenPublication) { pub ->
			project.shadow.component(pub)
			
			artifact allSourcesJar

            pom {
                name = 'BDeploy Public API'
                description = 'Public API including dependencies, ready to be used for integrations and plugins.'
                url = 'https://bdeploy.io'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/bdeployteam/bdeploy.git'
                    developerConnection = 'scm:git:git@github.com:bdeployteam/bdeploy.git'
                    url = 'https://github.com/bdeployteam/bdeploy'
                }
            }
		}
	}
	
	repositories {
		mavenLocal()
        maven {
            credentials {
                username project.findProperty('sonatypeUser') ?: 'anonymous'
                password project.findProperty('sonatypeToken') ?: ''
            }

            if(project.version.endsWith('-SNAPSHOT')) {
                url 'https://oss.sonatype.org/content/repositories/snapshots'
            } else {
                url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
            }
        }
	}
}

// workaround for missing gradle shadow plugin feature, see https://github.com/johnrengelman/shadow/issues/41
private Set<SourceDirectorySet> collectSourceSetsIncludingSubmodules(Project project){
	Set<SourceDirectorySet> result = [].toSet()
	recursiveCollectSourceSets(project, [].toSet(), result)
	return result
}

private void recursiveCollectSourceSets(Project visitingProject,
					Set<Project> visitedProjects,
					Set<SourceDirectorySet> collectedSourceSets) {
	if (!visitedProjects.contains(visitingProject)) {
		visitedProjects.add(visitingProject)
		collectedSourceSets.add(visitingProject.sourceSets.main.allSource)
		visitingProject.configurations.implementation.getAllDependencies().withType(ProjectDependency).each { ProjectDependency pd ->
			recursiveCollectSourceSets(pd.getDependencyProject(), visitedProjects, collectedSourceSets)
		}
	}
}
