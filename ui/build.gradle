def webappDir = "$projectDir/webapp"

apply plugin: 'cz.habarta.typescript-generator'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'cz.habarta.typescript-generator:typescript-generator-gradle-plugin:2.13+'
    }
}

dependencies {
    implementation(
        project(":common"),
        project(":jersey"),
        project(":bhive"),
        project(":interfaces"),
        'org.whitesource:pecoff4j:0.0.2.1'
    )
    testCompile project(path: ":jersey", configuration: 'testRuntime')
}

sourceSets {
    main {
        resources {
            srcDirs = ["$webappDir/dist", "$projectDir/src/main/resources"]
        }
    }
}

ext.sharedNpmLogic = { task, List<String> target -> 
    configure(task) {
        workingDir "$webappDir"
        group = BasePlugin.BUILD_GROUP
        def cmd = []
        if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
            commandLine (["npm"] + target)
        } else {
            commandLine (["npm.cmd"] + target)
        }
    }
}

evaluationDependsOn(':test-data')
task updateToken(dependsOn: ':test-data:setupDemoServer') {
    File dir = project(":test-data").buildDir
    File input = file("${dir}/test-token.txt")
    File output = file("${webappDir}/cypress/fixtures/token.json")

    inputs.file input
    outputs.file output

    doLast {
        String token = input.text
        output.text = """{
    "token": "${token}"
}"""
    }
}

task runCypressHeadless(type: Exec, dependsOn: updateToken) {
    workingDir "$webappDir"
    group = BasePlugin.BUILD_GROUP
    commandLine (["${webappDir}/node_modules/.bin/cypress", "run", "--record", "--key", "a32f4a49-c18e-4942-8fb3-38928b39318e"])
}

task runCypress(type: Exec, dependsOn: updateToken) {
    workingDir "$webappDir"
    commandLine (["${webappDir}/node_modules/.bin/cypress", "open"])
}

task runDevCypress(type: Exec) {
    doFirst {
        println("-----------------------------------------------------------------------------")
        println("Put the token for the backend server in the cypress/fixtures/token.json file!")
        println("Otherwise the test cannot create an instance on the running backend.")
        println("-----------------------------------------------------------------------------")
    }
    workingDir "$webappDir"
    commandLine (["${webappDir}/node_modules/.bin/cypress", "open", "--config", "baseUrl=http://localhost:4200", "--env", "backendBaseUrl=https://localhost:7701/api"])
}

task cleanAngular(type:Delete) {
    delete "$webappDir/dist"
}

task buildAngular(type:Exec) { t ->
    inputs.dir "$webappDir/src"
    outputs.dir "$webappDir/dist"
    sharedNpmLogic(t, ["run", "--", "ng", "build", "--prod"])
	dependsOn 'installAngular'
    dependsOn 'genDtos'
}

task installAngular(type:Exec) { t ->
    inputs.file "$webappDir/package.json"
    outputs.dir "$webappDir/node_modules"
    sharedNpmLogic(t, ["install"])
}

evaluationDependsOn(':doc')
task copyUserDoc(type:Copy, dependsOn:':doc:userDoc') {
    from tasks.getByPath(':doc:userDoc').outputs
    into "$webappDir/dist/webapp/assets/doc"
}

task genDtos() {
    dependsOn 'compileJava'

    inputs.files compileJava.destinationDir
    inputs.files project(":interfaces").sourceSets.main.output.classesDirs
    inputs.files project(":jersey").sourceSets.main.output.classesDirs
    outputs.file "${webappDir}/src/app/models/gen.dtos.ts"

    doLast {
        def cfg = new cz.habarta.typescript.generator.Jackson2Configuration();
        cfg.fieldVisibility = com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.ANY;
        cfg.getterVisibility = com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;
        cfg.setterVisibility = com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;

        def settings = new cz.habarta.typescript.generator.Settings();
        def classes = [
            // Descriptors
            'io.bdeploy.interfaces.descriptor.application.ApplicationDescriptor',
            'io.bdeploy.interfaces.descriptor.client.ClickAndStartDescriptor',
            // Configurations
            'io.bdeploy.interfaces.configuration.dcu.ApplicationConfiguration',
            'io.bdeploy.interfaces.configuration.pcu.ProcessStatusDto',
            'io.bdeploy.interfaces.configuration.instance.InstanceConfiguration',
            'io.bdeploy.interfaces.configuration.instance.InstanceGroupConfiguration',
            'io.bdeploy.interfaces.configuration.instance.InstanceNodeConfiguration',
            'io.bdeploy.interfaces.configuration.instance.SoftwareRepositoryConfiguration',
            // UI only DTOs
            'io.bdeploy.ui.dto.ApplicationDto',
            'io.bdeploy.ui.dto.CredentialsDto',
            'io.bdeploy.ui.dto.ClientApplicationDto',
            'io.bdeploy.ui.dto.InstanceDto',
            'io.bdeploy.ui.dto.InstanceClientAppsDto',
            'io.bdeploy.ui.dto.InstanceConfigurationDto',
            'io.bdeploy.ui.dto.InstanceNodeConfigurationDto',
            'io.bdeploy.ui.dto.InstanceNodeConfigurationListDto',
            'io.bdeploy.ui.dto.ProductDto',
            'io.bdeploy.ui.dto.HiveEntryDto',
            'io.bdeploy.ui.dto.InstanceVersionDto',
            'io.bdeploy.ui.dto.DeploymentStateDto',
            'io.bdeploy.ui.dto.FileStatusDto',
            'io.bdeploy.ui.dto.StringEntryChunkDto',
            'io.bdeploy.ui.dto.LauncherDto',
            'io.bdeploy.ui.dto.InstanceManifestHistoryDto',
            'io.bdeploy.ui.dto.InstanceUpdateEventDto',
            // Other, generic
            'io.bdeploy.common.ActivitySnapshot',
            'io.bdeploy.interfaces.cleanup.CleanupGroup',
            'io.bdeploy.interfaces.directory.InstanceDirectory',
            'io.bdeploy.interfaces.manifest.state.InstanceStateRecord',
        ]
        settings.customTypeMappings.put('java.net.URI', 'string');
        settings.customTypeNaming.put('io.bdeploy.bhive.model.Manifest$Key', 'ManifestKey');
        settings.customTypeNaming.put('io.bdeploy.bhive.model.Tree$EntryType', 'TreeEntryType');
        def excludeClasses = [
            'java.lang.Comparable',
            'java.io.Serializable',
        ]
        settings.setExcludeFilter(excludeClasses, null);
        settings.outputFileType = 'implementationFile'
        settings.outputKind = 'module'
        settings.mapEnum = 'asEnum'
        settings.nonConstEnums = true
        settings.jsonLibrary = 'jackson2'
        settings.noFileComment = true

        def outputFile = "${webappDir}/src/app/models/gen.dtos.ts"
        def tmpOutputFile = "${buildDir}/gen.dtos.tmp.ts"

        // add the compile classpath to see the classes dirs of other projects as JAR files are not yet built.
        def uris = configurations.compileClasspath.files.asType(List).collect { it.toURI().toURL() };
        // and add the runtime classpath as well to get our OWN classes.
        uris.addAll(sourceSets.main.runtimeClasspath.collect { it.toURI().toURL() });
        uris.unique();
        def cl = settings.createClassLoader("dummy", uris as URL[], Thread.currentThread().getContextClassLoader());

        settings.classLoader = cl;
        settings.setJackson2Configuration(cl, cfg);

        new cz.habarta.typescript.generator.TypeScriptGenerator(settings).generateTypeScript(
            cz.habarta.typescript.generator.Input.fromClassNamesAndJaxrsApplication(classes, [], [], [], null, false, settings.getExcludeFilter(), cl, false),
            cz.habarta.typescript.generator.Output.to(file(tmpOutputFile)));

        if(!file(outputFile).exists() || !file(outputFile).text.equals(file(tmpOutputFile).text)) {
            delete file(outputFile)
            file(tmpOutputFile).renameTo(file(outputFile))
        } else {
            println("No changes in generated DTO, skipping update")
        }
    }
}

processResources.dependsOn "buildAngular"
processResources.dependsOn "copyUserDoc"
clean.dependsOn "cleanAngular"

