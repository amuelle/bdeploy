plugins {
    id "com.github.psxpaul.execfork" version "0.2.2"
    id "cz.habarta.typescript-generator" version "3.2.1263"
}

def webappDir = "$projectDir/webapp"

dependencies {
    implementation(
        project(":common"),
        project(":messaging"),
        project(":logging"),
        project(":jersey"),
        project(":bhive"),
        project(":interfaces"),
        project(":schema"),
        'net.jsign:jsign-core:6.0',
        'com.vaadin:open:8.5.0.2',
    )
    commonTestDeps(testFixtures(project(":jersey")))
}

sourceSets {
    main {
        resources {
            srcDirs = ["$webappDir/dist"]
        }
    }
}

ext.sharedNpmLogic = { task, List<String> target -> 
    configure(task) {
        workingDir "$webappDir"
        group = BasePlugin.BUILD_GROUP
        if (!org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            commandLine (["npm"] + target)
        } else {
            commandLine (["npm.cmd"] + target)
        }
    }
}

ext.sharedCoverageServeLogic = { task, List<String> target -> 
    configure(task) {
        workingDir "$webappDir"
        group = BasePlugin.BUILD_GROUP
        // the scripts (run.sh, run.bat) are required due to a dumb change in the execfork plugin
        // which now expects a File instead of a String, which will automatically expand any given
        // string to an absolute path using the current directory. Since we don't know where npm
        // resides, we need to fix that by wrapping it in something we *do* know.
        if (!org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            executable "${projectDir}/.scripts/run.sh"
        } else {
            executable "${projectDir}/.scripts/run.bat"
        }

        // we need --host in *some* network environments for unknown reason for cypress to be able
        // to connect to the server(s).
        args = ["npm", "run", "--", "ng", "serve", "--host", "0.0.0.0", "--no-watch", "--no-live-reload"] + target
    }
}

evaluationDependsOn(':test-data')

task updateFixtureProducts(type: Copy) {
    def prj = project(':test-data')
    from prj.product1Zip.outputs
    from prj.product2Zip.outputs
    from prj.product3Zip.outputs
    from prj.externalSoftwareZip.outputs
    from prj.externalSoftware2Zip.outputs

    from new File(prj.projectDir, "/system-template.yaml")

    into "${webappDir}/cypress/fixtures"

    doFirst {
        delete fileTree("${webappDir}/cypress/fixtures").matching { include "*.zip" }
    }
}

task triggerStopCoverageStandalone {
    doLast {
        println "Stop Coverage for Standalone"
    }
}

task runCoverageServerStandalone(type: com.github.psxpaul.task.ExecFork) {
    sharedCoverageServeLogic(it, ["-c", "cov-standalone"])
    waitForOutput = "Compiled successfully"
    timeout = 240
    stopAfter = triggerStopCoverageStandalone
    dependsOn 'buildAngular'
    mustRunAfter(updateFixtureProducts)
}

task triggerStopCoverageCentral {
    doLast {
        println "Stop Coverage for Central"
    }
}

task runCoverageServerCentral(type: com.github.psxpaul.task.ExecFork) {
    sharedCoverageServeLogic(it, ["-c", "cov-central"])
    waitForOutput = "Compiled successfully"
    timeout = 240
    stopAfter = triggerStopCoverageCentral
    dependsOn 'buildAngular'
    mustRunAfter(updateFixtureProducts)
}

task triggerStopCoverageManaged {
    doLast {
        println "Stop Coverage for Managed"
    }
}

task runCoverageServerManaged(type: com.github.psxpaul.task.ExecFork) {
    sharedCoverageServeLogic(it, ["-c", "cov-managed"])
    waitForOutput = "Compiled successfully"
    timeout = 240
    stopAfter = triggerStopCoverageManaged
    dependsOn 'buildAngular'
    mustRunAfter(updateFixtureProducts)
}

task updateFixtures() {
    // currently nothing except dependencies...
    dependsOn ':test-data:setupDemoServer'
    dependsOn 'updateFixtureProducts'
    dependsOn runCoverageServerStandalone
    if(!project.hasProperty('cypressNoCentral')) {
        dependsOn runCoverageServerCentral
        dependsOn runCoverageServerManaged
    }
}

String quoteJson(String s) {
    if(org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        // on windows, cypress CLI runs through an additional set of unquoting. hate this.
        s = s.replace("\"", "\\\"");
    }
    return s;
}

List<String> getCypressConfig() {
    def managedPort = project(":test-data").testServerPortManaged
    def timeout = '60000'
    if(project.hasProperty('cypressTimeout')) {
        timeout = project.property('cypressTimeout')
    }
    return [
        "--config", quoteJson("{\"baseUrl\":\"http://localhost:4210\","+
                    "\"defaultCommandTimeout\":${timeout},"+
                    "\"requestTimeout\":${timeout},"+
                    "\"responseTimeout\":${timeout},"+
                    "\"taskTimeout\":${timeout},"+
                    "\"execTimeout\":${timeout},"+
                    "\"pageLoadTimeout\":${timeout}"
                    + (project.hasProperty('cypressNoCentral') 
                        ? ",\"e2e\":{\"excludeSpecPattern\":\"**/central-managed.spec.js\"}" 
                        : "") +
                    "}"),
        "--env", "baseUrlCentral=http://localhost:4211"
        + ",baseUrlManaged=http://localhost:4212"
        + ",backendBaseUrlManaged=https://localhost:${managedPort}/api"
        + (project.hasProperty('cypressNoCoverage') ? ",DISABLE_COVERAGE=yes" : "")
    ]
}

String cypressCmd() {
    if (!org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        return "cypress";
    } else {
        return "cypress.cmd";
    }
}

task runCypressHeadless(type: Exec, dependsOn: updateFixtures) {
    workingDir "$webappDir"
    group = BasePlugin.BUILD_GROUP

    // required for bin-test-data update.
    outputs.file "${webappDir}/cypress/fixtures/instance-export.zip"
    outputs.upToDateWhen { false }

    List<String> properties = getCypressConfig()
    if(project.hasProperty('cypressIgnoreExitValue')) {
        ignoreExitValue = true
    }
    if(project.hasProperty('cypressBrowser')) {
        properties.add('--browser')
        properties.add(project.property('cypressBrowser'))
    }
    if(project.hasProperty('cypressHeadless')) {
    	properties.add('--headless')
    }
    if(project.hasProperty('recordCypress')) {
        properties.add('--record')
        properties.add('--key')
        properties.add('a32f4a49-c18e-4942-8fb3-38928b39318e')
    }
    if(project.hasProperty('cypressParallel')) {
        properties.add('--parallel')
    }
    if(project.hasProperty('cypressGroup')) {
        properties.add('--group')
    }
    if(project.hasProperty('cypressBuildId')) {
        properties.add('--ci-build-id')
    }
    commandLine (["${webappDir}/node_modules/.bin/" + cypressCmd(), "run" ] + properties)
}

task updateDocuScreenshots(type: Copy, dependsOn: runCypressHeadless) {
    from file("${webappDir}/cypress/screenshots/")
    into new File(project(":doc").projectDir, "retypeuser/images")

    include "**/*.png"

    // flatten by using filename as relative path
    eachFile {
        path = name
    }

    includeEmptyDirs = false
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    doLast {  
        println('Updating screenshots of user documentation done.')
    }
}

task runCypress(type: Exec, dependsOn: updateFixtures) {
    workingDir "$webappDir"
    def port = project(":test-data").testServerPort
    commandLine (["${webappDir}/node_modules/.bin/" + cypressCmd(), "open"] + getCypressConfig())
}

task runDevCypress(type: Exec) {
    workingDir "$webappDir"
    commandLine (["${webappDir}/node_modules/.bin/" + cypressCmd(), "open", 
        "--config", "baseUrl=http://localhost:4200", 
        "--env", "baseUrlCentral=http://localhost:4201"
        + ",baseUrlManaged=http://localhost:4202"
    ])
}

// this one is required to stop the server and accumulate coverage data
task doneWithCypressHeadless(dependsOn: [':test-data:triggerStopBDeploy', triggerStopCoverageStandalone]) {
    doLast {
        println('Cypress Testing done...')
    }

    dependsOn runCypressHeadless
    if(!project.hasProperty('cypressNoCentral')) {
        dependsOn triggerStopCoverageCentral
        dependsOn triggerStopCoverageManaged
    }
}

project(':test-data').tasks['triggerStopBDeploy'].mustRunAfter runCypressHeadless
triggerStopCoverageStandalone.mustRunAfter runCypressHeadless
triggerStopCoverageCentral.mustRunAfter runCypressHeadless
triggerStopCoverageManaged.mustRunAfter runCypressHeadless
test.dependsOn doneWithCypressHeadless

task release(type: Copy, dependsOn: runCypressHeadless) {
    from("${webappDir}/cypress/fixtures/instance-export.zip") {
        rename { version + ".zip" }
    }
    into new File(project(':test-data').projectDir, "bin-test-data")

    doLast {
        println "Release seems to do well with UI tests"
    }
}

task cleanAngular(type:Delete) {
    delete "$webappDir/dist"
}

task buildAngularInternal(type:Exec) { t ->
    inputs.dir "$webappDir/src"
    outputs.dir "$webappDir/dist"
    sharedNpmLogic(t, ["run", "--", "ng", "build", "-c", "production"])
	dependsOn 'installAngular'
    dependsOn 'genDtos'
}

task buildAngular() {
    dependsOn 'buildAngularInternal'
    dependsOn 'copyUserDoc'
}

task installAngular(type:Exec) { t ->
    inputs.file "$webappDir/package.json"
    outputs.dir "$webappDir/node_modules"
    sharedNpmLogic(t, ["ci", "--legacy-peer-deps"])
}

evaluationDependsOn(':doc')
task copyUserDoc(type:Copy, dependsOn:':doc:retypeUserDoc') {
    from tasks.getByPath(':doc:retypeUserDoc').outputs
    into "$webappDir/dist/webapp/assets/doc"

    mustRunAfter 'buildAngularInternal'
}

task genDtos(type: cz.habarta.typescript.generator.gradle.GenerateTask, dependsOn: compileJava) {
    jsonLibrary = 'jackson2'
    classes = [
        // Descriptors
        'io.bdeploy.interfaces.descriptor.application.ApplicationDescriptor',
        'io.bdeploy.interfaces.descriptor.application.HttpEndpoint$HttpAuthenticationType',
        // Configurations and their DTOs
        'io.bdeploy.interfaces.configuration.SettingsConfiguration',
        'io.bdeploy.interfaces.configuration.dcu.ApplicationConfiguration',
        'io.bdeploy.interfaces.configuration.pcu.ProcessStatusDto',
        'io.bdeploy.interfaces.configuration.pcu.ProcessDetailDto',
        'io.bdeploy.interfaces.configuration.instance.InstanceConfiguration',
        'io.bdeploy.interfaces.configuration.instance.InstanceGroupConfigurationDto',
        'io.bdeploy.interfaces.configuration.instance.InstanceNodeConfiguration',
        'io.bdeploy.interfaces.configuration.instance.SoftwareRepositoryConfiguration',
        'io.bdeploy.interfaces.configuration.instance.InstanceConfigurationDto',
        'io.bdeploy.interfaces.configuration.instance.FileStatusDto',
        'io.bdeploy.interfaces.configuration.instance.InstanceUpdateDto',
        'io.bdeploy.interfaces.configuration.template.FlattenedInstanceTemplateConfiguration',
        // UI only DTOs
        'io.bdeploy.ui.dto.ApplicationDto',
        'io.bdeploy.ui.dto.ClientApplicationDto',
        'io.bdeploy.ui.dto.InstanceDto',
        'io.bdeploy.ui.dto.InstanceAllClientsDto',
        'io.bdeploy.ui.dto.InstanceOverallStatusDto',
        'io.bdeploy.ui.dto.InstanceNodeConfigurationListDto',
        'io.bdeploy.ui.dto.ProductDto',
        'io.bdeploy.ui.dto.HiveInfoDto',
        'io.bdeploy.ui.dto.HiveEntryDto',
        'io.bdeploy.ui.dto.InstanceVersionDto',
        'io.bdeploy.ui.dto.JobDto',
        'io.bdeploy.ui.dto.StringEntryChunkDto',
        'io.bdeploy.ui.dto.ConfigFileDto',
        'io.bdeploy.ui.dto.BackendInfoDto',
        'io.bdeploy.ui.dto.ProductTransferDto',
        'io.bdeploy.ui.dto.InstanceUsageDto',
        'io.bdeploy.ui.dto.HistoryResultDto',
        'io.bdeploy.ui.dto.HistoryEntryDto',
        'io.bdeploy.ui.dto.HistoryFilterDto',
        'io.bdeploy.ui.dto.UploadInfoDto',
        'io.bdeploy.ui.dto.ObjectChangeType',
        'io.bdeploy.ui.dto.ObjectChangeHint',
        'io.bdeploy.ui.dto.ObjectChangeDetails',
        'io.bdeploy.ui.dto.NodeAttachDto',
        'io.bdeploy.ui.dto.MinionSyncResultDto',
        'io.bdeploy.ui.dto.SystemConfigurationDto',
        'io.bdeploy.ui.dto.SystemTemplateDto',
        'io.bdeploy.ui.dto.SystemTemplateRequestDto',
        'io.bdeploy.ui.dto.SystemTemplateResultDto',
        'io.bdeploy.ui.dto.InstanceProcessStatusDto',
        'io.bdeploy.ui.dto.BulkOperationResultDto',
        'io.bdeploy.ui.dto.UserBulkAssignPermissionDto',
        'io.bdeploy.ui.dto.UserBulkRemovePermissionDto',
        'io.bdeploy.ui.dto.UserGroupBulkAssignPermissionDto',
        'io.bdeploy.ui.dto.UserGroupBulkRemovePermissionDto',
        // Other, generic
        'io.bdeploy.common.Version',
        'io.bdeploy.common.security.ApiAccessToken',
        'io.bdeploy.interfaces.cleanup.CleanupGroup',
        'io.bdeploy.interfaces.directory.RemoteDirectory',
        'io.bdeploy.interfaces.minion.MinionStatusDto',
        'io.bdeploy.interfaces.minion.NodeSynchronizationStatus',
        'io.bdeploy.interfaces.manifest.banner.InstanceBannerRecord',
        'io.bdeploy.interfaces.manifest.attributes.CustomAttributesRecord',
        'io.bdeploy.interfaces.manifest.state.InstanceStateRecord',
        'io.bdeploy.interfaces.manifest.statistics.ClientUsageData',
        'io.bdeploy.interfaces.RepairAndPruneResultDto',
        'io.bdeploy.interfaces.UserGroupInfo',
        'io.bdeploy.interfaces.UserInfo',
        'io.bdeploy.interfaces.UserProfileInfo',
        'io.bdeploy.interfaces.UserPermissionUpdateDto',
        'io.bdeploy.interfaces.UserGroupPermissionUpdateDto',
        'io.bdeploy.interfaces.UserChangePasswordDto',
        'io.bdeploy.interfaces.VerifyOperationResultDto',
        'io.bdeploy.interfaces.plugin.PluginInfoDto',
        'io.bdeploy.interfaces.settings.WebAuthSettingsDto',
        'io.bdeploy.interfaces.settings.SpecialAuthenticators',
        'io.bdeploy.api.remote.v1.dto.CredentialsApi',
        'io.bdeploy.jersey.ws.change.msg.ObjectChangeDto',
        'io.bdeploy.jersey.ws.change.msg.ObjectChangeInitDto',
        'io.bdeploy.jersey.ws.change.msg.ObjectChangeRegistrationDto',
        'io.bdeploy.jersey.actions.ActionBroadcastDto',
        // Metrics
        'io.bdeploy.jersey.resources.JerseyMetricsResource$MetricBundle',
        'io.bdeploy.common.metrics.Metrics$MetricGroup',
        'io.bdeploy.jersey.monitoring.JerseyServerMonitoringDto',
    ]
    customTypeMappings = [
        'java.net.URI:string',
        'java.time.Instant:number'
    ]
    customTypeNaming = [
        'io.bdeploy.bhive.model.Manifest$Key:ManifestKey',
        'io.bdeploy.bhive.model.Tree$EntryType:TreeEntryType'
    ]
    excludeClasses = [
        'java.lang.Comparable',
        'java.io.Serializable',
    ]
    outputFileType = 'implementationFile'
    outputKind = 'module'
    mapEnum = 'asEnum'
    nonConstEnums = true
    jsonLibrary = 'jackson2'
    noFileComment = true

    def cfg = new cz.habarta.typescript.generator.Jackson2Configuration();
    cfg.fieldVisibility = com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.ANY;
    cfg.getterVisibility = com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;
    cfg.isGetterVisibility = com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;
    cfg.setterVisibility = com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.NONE;

    jackson2Configuration = cfg

    outputFile = "${buildDir}/gen.dtos.tmp.ts"

    doLast {
        def outputFile = "${webappDir}/src/app/models/gen.dtos.ts"
        def tmpOutputFile = "${buildDir}/gen.dtos.tmp.ts"

        if(!file(outputFile).exists() || !file(outputFile).text.equals(file(tmpOutputFile).text)) {
            delete file(outputFile)
            file(tmpOutputFile).renameTo(file(outputFile))
        } else {
            println("No changes in generated DTO, skipping update")
        }
    }
}

sonarqube {
    properties {
        properties["sonar.sources"] += "${projectDir}/webapp/src"
        property "sonar.javascript.lcov.reportPaths", "${projectDir}/webapp/coverage/lcov.info"
    }
}

processResources.dependsOn "buildAngular"
processResources.dependsOn "copyUserDoc"
clean.dependsOn "cleanAngular"

