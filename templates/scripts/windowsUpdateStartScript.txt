@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  ${applicationName} startup script for Windows
@rem
@rem ##########################################################################

:execute
set DIRNAME=%~dp0
set CMD_LINE_ARGS=%*
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%${appHomeRelativePath}
set APP_UPDATE_NEXT=%APP_HOME%\\update\\next
set APP_UPDATE_BAK=%APP_HOME%\\update\\bak

set DEFAULT_JVM_OPTS=${defaultJvmOpts}
set JAVA_EXE=%APP_HOME%\\jre\\bin\\java.exe
set CLASSPATH="%APP_HOME%\\lib\\*"

@rem Execute JAVA to check if all is OK
"%JAVA_EXE%" -version >NUL 2>&1
if NOT "%ERRORLEVEL%" == "0" (
    echo ERROR: Embedded JRE terminated with exit code %ERRORLEVEL%.
    echo JRE located in "%JAVA_EXE%" is corrupt or missing.
    goto :fail
)

@rem Execute ${applicationName} (--updateDir BDEPLOY EXTENSION)
@rem echo "Starting minion with embedded JVM."
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %${optsEnvironmentVar}% <% if ( appNameSystemProperty ) { %>"-D${appNameSystemProperty}=%APP_BASE_NAME%"<% } %> -classpath %CLASSPATH% ${mainClassName} %CMD_LINE_ARGS% "--updateDir=%APP_HOME%\\update"

@rem update requested (exit code == 42)
IF NOT "%ERRORLEVEL%"=="42" (
    IF NOT "%ERRORLEVEL%"=="0" (
        echo "Minion terminated with exit code %ERRORLEVEL%."
        goto :fail
    )
    goto :end
)
echo "Minion signalled restart request."

@rem Add the --skipAutoStart to avoid re-starting intentionally stopped instances.
set CMD_LINE_ARGS=%CMD_LINE_ARGS% --skipAutoStart

@rem Check if we have the expected update in place
IF NOT EXIST "%APP_UPDATE_NEXT%\\lib" (
    echo "No update to be applied has been found. Restarting."
    goto :execute
)

@rem Remove old backups before creating a new one
IF EXIST "%APP_UPDATE_BAK%" (
    echo "Removing old backup."
    rmdir /q /s "%APP_UPDATE_BAK%"
)

@rem Fail if we cannot delete the old backup
IF EXIST "%APP_UPDATE_BAK%" (
    echo "Unable to delete old backup directory. Aborting update."
	goto :fail
)

@rem Backup current installation
echo "Creating backup of current version."
mkdir "%APP_UPDATE_BAK%"
move /y "%APP_HOME%\\jre" "%APP_UPDATE_BAK%\\jre"
move /y "%APP_HOME%\\lib" "%APP_UPDATE_BAK%\\lib"
move /y "%APP_HOME%\\version.properties" "%APP_UPDATE_BAK%\\version.properties"

@rem Copy files from update to current directory
echo "Copying new files from update directory."
move /y "%APP_UPDATE_NEXT%\\lib" "%APP_HOME%\\lib"
move /y "%APP_UPDATE_NEXT%\\jre" "%APP_HOME%\\jre"
move /y "%APP_UPDATE_NEXT%\\version.properties" "%APP_HOME%\\version.properties"

@rem Remove update after all files have been copied
echo "Cleanup update directory."
rmdir /s /q "%APP_UPDATE_NEXT%"
echo "Update applied. Restarting application."
goto :execute

:fail
if "%ERRORLEVEL%" == "0" (
    exit /b 1
)
exit /b %ERRORLEVEL%

:end
exit /b 0
