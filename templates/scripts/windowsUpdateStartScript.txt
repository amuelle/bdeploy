@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  ${applicationName} startup script for Windows
@rem
@rem ##########################################################################
setlocal enabledelayedexpansion

:execute
set DIRNAME=%~dp0
set CMD_LINE_ARGS=%*
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%${appHomeRelativePath}
set APP_UPDATE_NEXT=%APP_HOME%\\update\\next
set APP_UPDATE_BAK=%APP_HOME%\\update\\bak

set DEFAULT_JVM_OPTS=${defaultJvmOpts}
set JAVA_EXE=%APP_HOME%\\jre\\bin\\java.exe
set CLASSPATH="%APP_HOME%\\lib\\*"

@rem Execute JAVA to check if all is OK
"%JAVA_EXE%" -version >NUL 2>&1
if NOT "%ERRORLEVEL%" == "0" (
    echo ERROR: Embedded JRE terminated with exit code %ERRORLEVEL%.
    echo JRE located in "%JAVA_EXE%" is corrupt or missing.
    goto :fail
)

@rem Execute ${applicationName} (--updateDir BDEPLOY EXTENSION)
echo "Starting minion with embedded JVM."
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %${optsEnvironmentVar}% <% if ( appNameSystemProperty ) { %>"-D${appNameSystemProperty}=%APP_BASE_NAME%"<% } %> -classpath %CLASSPATH% ${mainClassName} %CMD_LINE_ARGS% "--updateDir=%APP_HOME%\\update"

@rem update requested (exit code == 42)
IF NOT "%ERRORLEVEL%"=="42" (
    echo "Minion terminated with exit code %ERRORLEVEL%."
    goto :end
)
echo "Minion signalled update request."

@rem Check if we have the expected update in place
if NOT EXIST "%APP_UPDATE_NEXT%\\lib" (
    echo "Unexpected directory structure in update dir. Update will not be applied. Terminating."
    goto :fail
)

@rem Remove old backups before creating a new one
echo "Removing old backups."
FOR /d %%D in ("%APP_UPDATE_BAK%*") DO (
    echo "Deleting %%~D"
    rmdir /s /q "%%~D"
)

@rem Find the next available backup directory
set /A COUNTER=1
:findBackupDir
IF EXIST "%APP_UPDATE_BAK%" (
    if "!COUNTER!" == "1" (
        echo "Not all old backups could be deleted. Another minion might still be running."
    )
    set TMP_BAK=!APP_UPDATE_BAK!-!COUNTER!
    IF EXIST !TMP_BAK! (
        set /A COUNTER=COUNTER+1
        goto findBackupDir
    )
    set APP_UPDATE_BAK="!TMP_BAK!"
)

@rem Backup current installation
echo "Using backup directory %APP_UPDATE_BAK%"
mkdir "%APP_UPDATE_BAK%"
xcopy /Y /E /I /H /Q "%APP_HOME%\\lib" "%APP_UPDATE_BAK%\\lib" > nul
xcopy /Y /E /I /H /Q "%APP_HOME%\\jre" "%APP_UPDATE_BAK%\\jre" > nul
move /y "%APP_HOME%\\BDeploy.exe" "%APP_UPDATE_BAK%\\BDeploy.exe" > nul
move /y "%APP_HOME%\\FileAssoc.exe" "%APP_UPDATE_BAK%\\FileAssoc.exe" > nul
move /y "%APP_HOME%\\version.properties" "%APP_UPDATE_BAK%\\version.properties" > nul

@rem Copy files from update to current directory
echo "Copying new files from update directory."
xcopy /Y /E /I /H /Q "%APP_UPDATE_NEXT%\\lib" "%APP_HOME%\\lib" > nul
xcopy /Y /E /I /H "%APP_UPDATE_NEXT%\\jre" "%APP_HOME%\\jre" > nul
copy /y "%APP_UPDATE_NEXT%\\BDeploy.exe" "%APP_HOME%\\BDeploy.exe" > nul
copy /y "%APP_UPDATE_NEXT%\\FileAssoc.exe" "%APP_HOME%\\FileAssoc.exe" > nul
copy /y "%APP_UPDATE_NEXT%\\version.properties" "%APP_HOME%\\version.properties" > nul

@rem Remove update after all files have been copied
echo "Cleanup update directory."
rmdir /s /q "%APP_UPDATE_NEXT%"
echo "Update applied. Restarting application"
goto :execute

:fail
exit /b 1

:end
endlocal
