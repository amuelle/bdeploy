/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.adarshr:gradle-test-logger-plugin:1.6.0'
        classpath 'ru.vyarus:gradle-quality-plugin:3.3.0'
    }
}

plugins {
    id 'base'
    id 'com.palantir.jacoco-full-report' version '0.4.0'
    id 'com.github.ben-manes.versions' version '0.20.0'
    id "org.sonarqube" version "2.7"
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "bdeployteam_bdeploy"
    }
}

ext {
    // Defines the path to a WINDOWS JDK, to be able to build windows dist packages on linux
    win64jdk = readJdk("win64jdk")
    // Defines the path to a LINUX JDK, to be able to build linux dist packages on windows
    linux64jdk = readJdk("linux64jdk")

    // build SNAPSHOT replacement where needed.
    buildDate = new Date().format('yyyyMMddHHmm')
}

allprojects {
    version = '1.0.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'com.adarshr.test-logger'
    apply plugin: 'ru.vyarus.quality'
    apply plugin: 'eclipse'

    eclipse.project {
        natures 'org.eclipse.xtext.ui.shared.xtextNature'
        buildCommand 'org.eclipse.xtext.ui.shared.xtextBuilder'
    }

    sourceCompatibility = JavaVersion.VERSION_1_10
    targetCompatibility = JavaVersion.VERSION_1_10
    compileJava.options.encoding = 'UTF-8'

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.2',
                           'org.junit.jupiter:junit-jupiter-params:5.3.2',
                           'org.hamcrest:hamcrest-core:1.3'
        testRuntimeOnly    'org.junit.jupiter:junit-jupiter-engine:5.3.2'
    }

    quality {
        consoleReporting = false
        checkstyle = false
        pmd = false
        strict = false

        lintOptions = [ 'all', '-try' ]
    }

    jacoco {
        toolVersion = "0.8.2"
    }

    jacocoTestReport {
        shouldRunAfter "test"
        executionData fileTree(dir: "$buildDir/jacoco").matching { include '*.exec' }
    }

    testlogger {
        theme 'mocha-parallel'
        slowThreshold 6000
    }

    test {
        useJUnitPlatform {
        //    excludeTags 'slow'
        }
        maxParallelForks = 8
        maxHeapSize = "2g"
        testLogging {
            reports.html.enabled = false
        }
    }

    // this is required to allow dependencies to test classes in src/test/java
    task testJar(type: Jar) {
        classifier = 'test'
        from sourceSets.test.output
    }

    artifacts {
        testRuntime testJar
    }

	task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc.destinationDir

        dependsOn javadoc
    }

    javadoc {
        options.addBooleanOption('html5', true)
        options.addStringOption('Xdoclint:-missing', '-quiet')
    }

    // custom JDT preferences, includes formatter, save actions, source compliance (!).
    eclipseJdt.doLast {
        file('.settings/org.eclipse.jdt.core.prefs').withWriter { writer ->
            // file is specific for sourceCompatibility which can be overruled in each project build.gradle
            writer << file("${rootDir}/templates/org.eclipse.jdt.core.prefs-${sourceCompatibility}").text
        }
        file('.settings/org.eclipse.jdt.ui.prefs').withWriter { writer ->
            writer << file("${rootDir}/templates/org.eclipse.jdt.ui.prefs").text
        }
    }

    task cleanCustomEclipseJdt(type: Delete) {
        delete ".settings/org.eclipse.jdt.ui.prefs"
    }

    cleanEclipseJdt.finalizedBy cleanCustomEclipseJdt

    task genVersionProperties() {
        outputs.upToDateWhen { false }
        outputs.file "$buildDir/resources/main/version.properties"
        doLast {
            file("$buildDir/resources/main").mkdirs()
            file("$buildDir/resources/main/version.properties").withWriter { w ->
                Properties p = new Properties()
                p['project'] = project.name
                p['snapshot'] = version.contains('SNAPSHOT') ? 'true' : 'false'
                p['version'] = version.replaceAll('SNAPSHOT', rootProject.ext.buildDate)
                p.store w, null
            }
        }
    }

    processResources.dependsOn genVersionProperties
}

def void addMultiPlatformDistBuild(Project prj) {
    prj.startScripts {
        inputs.dir "${rootProject.projectDir}/templates/scripts"

        // copied from https://github.com/gradle/gradle/tree/master/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins
        unixStartScriptGenerator.template = resources.text.fromFile("${rootProject.projectDir}/templates/scripts/unixUpdateStartScript.txt")
        windowsStartScriptGenerator.template = resources.text.fromFile("${rootProject.projectDir}/templates/scripts/windowsUpdateStartScript.txt")

        if(prj.ext.has('scriptDefVmArgs')) {
            defaultJvmOpts = prj.ext.get('scriptDefVmArgs')
        }
    }

    prj.distributions {
        linux64 {
            contents {
                with prj.distributions.main.getContents()
                from rootProject.jlinkLinux64.outputs
                from prj.genVersionProperties.outputs
            }
        }

        win64 {
            contents {
                with prj.distributions.main.getContents()
                from rootProject.jlinkWin64.outputs
                from prj.genVersionProperties.outputs
            }
        }
    }

    // don't build the ZIP dist without any JVM
    prj.distZip.enabled = false

    // no tar files at all, please
    prj.distTar.enabled = false
    prj.linux64DistTar.enabled = false
    prj.win64DistTar.enabled = false

    if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
        // need special JDK for win64 as module input dir
        prj.build.dependsOn prj.linux64DistZip
        prj.installDist.dependsOn prj.installLinux64Dist
        if(!hasWinJdk()) {
            prj.win64DistZip.enabled = false
        }
    } else {
        // need special JDK for linux64 as module input dir
        prj.build.dependsOn prj.win64DistZip
        prj.installDist.dependsOn prj.installWin64Dist
        if(!hasLinuxJdk()) {
            prj.linux64DistZip.enabled = false
        }
    }

    prj.installLinux64Dist.doFirst {
        delete "$destinationDir"
    }

}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}

task test {
    dependsOn subprojects*.test
    finalizedBy testReport
    finalizedBy jacocoFullReport
}

build.dependsOn test

task genJavaDoc(type: Javadoc) {
    source = subprojects*.sourceSets.main.allJava
    destinationDir = reporting.file("javadoc")
    classpath = files(subprojects*.sourceSets.main.compileClasspath)
    options.addBooleanOption('html5', true)
    options.addStringOption('Xdoclint:-missing', '-quiet')
}

build.finalizedBy genJavaDoc

/*gradle.taskGraph.whenReady {taskGraph ->
    println "Found task graph: " + taskGraph
    println "Found " + taskGraph.allTasks.size() + " tasks."
    taskGraph.allTasks.forEach { task ->
        println task
        task.dependsOn.forEach { dep ->
            println "  - " + dep
        }
    }
}*/

private boolean hasWinJdk() {
    return file("$win64jdk/bin/java.exe").exists();
}

private boolean hasLinuxJdk() {
    return file("$linux64jdk/bin/java").exists();
}

private String readJdk(String which) {
    def v = System.getProperty(which)
    if(v != null) {
        return v;
    }
    return System.getProperty("java.home")
}

ext.configureJlink = { task, String modHome, String outDir ->
    configure(task) {
        outputs.dir "$outDir"

        def linkExec
        if(org.gradle.internal.os.OperatingSystem.current().isLinux()) {
            linkExec = [ "$linux64jdk/bin/jlink", "--module-path", "$modHome/jmods:mlib" ]
        } else {
            linkExec = [ "$win64jdk\\bin\\jlink.exe", "--module-path", "$modHome\\jmods;mlib" ]
        }

        // find required modules with this command:
        // $JAVA_HOME/bin/jdeps -summary *.jar | awk '{ print $3 }' | sort -u
        commandLine ( linkExec + [
            "--output", "$outDir/jre",
            "--compress=2", "--no-header-files", "--no-man-pages",
            "--add-modules",
            "java.base,java.compiler,java.datatransfer,java.desktop,java.instrument,java.logging,java.management,java.naming,java.sql,java.xml,java.xml.bind,jdk.jdwp.agent,jdk.jdi,jdk.zipfs,jdk.jcmd"
        ])

        doFirst {
            delete "$outDir"
        }
    }
}

task jlinkLinux64(type:Exec) { t ->
    configureJlink(t, "$linux64jdk", "$buildDir/jlink/linux64")
    doFirst {
        if (!hasLinuxJdk()) {
            throw new InvalidUserDataException("$linux64jdk does not seem to be a linux JDK, please set -Plinux64jdk=c:/path/to/jdk")
        }
    }
}

task jlinkWin64(type:Exec) { t ->
    configureJlink(t, "$win64jdk", "$buildDir/jlink/win64")
    doFirst {
        if (!hasWinJdk()) {
            throw new InvalidUserDataException("$win64jdk does not seem to be a windows JDK, please set -Pwin64jdk=/path/to/jdk")
        }
    }
}

if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
    // need special JDK for win64 as module input dir
    if(!hasWinJdk()) {
        logger.warn("No windows JDK available, skipping windows distribution")
        jlinkWin64.enabled = false
    }
} else {
    // need special JDK for linux64 as module input dir
    if(!hasLinuxJdk()) {
        logger.warn("No linux JDK available, skipping linux distribution")
        jlinkLinux64.enabled = false
    }
}

