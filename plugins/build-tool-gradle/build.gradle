/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6.1/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id "com.gradle.plugin-publish" version "0.18.0"
    id 'java-gradle-plugin'
    id 'eclipse'
    id "com.github.ben-manes.versions" version "0.39.0"
}

repositories {
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/groups/public/'
    }
}

version = "4.0.3"
group = "io.bdeploy"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

dependencies {
    // Use JUnit test framework for unit tests
    testImplementation 'junit:junit:4.13.2'
    testImplementation gradleTestKit()

    implementation (
        'io.bdeploy:api:4.0.2'
    )
}

gradlePlugin {
    // Define the plugin
    plugins {
        bdeploy {
            id = 'io.bdeploy.gradle.plugin'
            implementationClass = 'io.bdeploy.gradle.BDeployGradlePlugin'
            displayName = "BDeploy Gradle plugin"
            description = 'Plugin which builds BDeploy products from your applications'
        }
    }
}

pluginBundle {
    website = 'https://bdeploy.io/'
    vcsUrl = 'https://github.com/bdeployteam/bdeploy'
    tags = ['BDeploy', 'deployment', 'application', 'product']

    plugins {
        bdeploy {
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

