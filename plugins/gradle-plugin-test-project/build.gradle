/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'
    id 'eclipse'

    id 'io.bdeploy.gradle.plugin'

    id "com.github.ben-manes.versions" version "0.38.0"
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

version = "1.0.1-SNAPSHOT"

ext {
    buildDate = new Date().format('yyyyMMddHHmmss')
    buildVersion = project.version.replaceAll('SNAPSHOT', buildDate)
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1-jre'

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
}

application {
    // Define the main class for the application.
    mainClassName = 'io.bdeploy.gradle.test.App'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

task buildProduct(type: io.bdeploy.gradle.BDeployProductTask, dependsOn: installDist) {
    if(project.hasProperty('token')) {
        repositoryServer {
            uri = 'https://localhost:7701/api'
            token = project.getProperty('token')
        }
    }
    product {
        version = project.ext.buildVersion
        productInfo = file('bdeploy/product-info.yaml')

        applications {
            test {
                yaml = new File(installDist.destinationDir, 'app-info.yaml')
            }
        }

        labels.put('buildDate', project.ext.buildDate)
    }
}

task zipProduct(type: io.bdeploy.gradle.BDeployZipTask, dependsOn: buildProduct) {
    of buildProduct
    output = new File(buildDir, "product-" + project.ext.buildVersion + ".zip");
}


task pushProduct(type: io.bdeploy.gradle.BDeployPushTask, dependsOn: buildProduct) {
    of buildProduct

    target.servers {
            if(project.hasProperty('token')) {
                localhost {
                    uri = 'https://localhost:7701/api'
                    token = project.getProperty('token')
                    instanceGroup = project.getProperty('instanceGroup')
                }
            }
            if(project.hasProperty('centralToken')) {
                central {
                    uri = 'https://localhost:7705/api'
                    token = project.getProperty('centralToken')
                    instanceGroup = project.getProperty('centralInstanceGroup')
                }
            }
    }
}

