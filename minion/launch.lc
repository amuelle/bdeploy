abstract java configuration minion-base {
	project minion;
	main-class io.bdeploy.minion.cli.MinionServerCli;
	
	argument "-v";
}

/** Launches the master with a single node */
group configuration MasterNode {
	adopt member Node regex ".*Started.*";
	adopt member Master;
}

/** Launches the central master with a managed master */
group configuration CentralMaster {
	adopt member Managed-Master;
	adopt member Central-Master;
}

/** Launches the central master with a managed master  + node  */
group configuration CentralMasterNode {
	adopt member Managed-Node regex ".*Started.*";
	adopt member Managed-Master;
	adopt member Central-Master;
}

/**
 * Initialize a new master root.
 */
java configuration Master-Init : minion-base {
	argument "init";
	argument "--root=${workspace_loc}/runtime/master";
	argument "--logData=${workspace_loc}/runtime/master/external";
	argument "--hostname=localhost";
	argument "--port=7701";
	argument "--dist=ignore";
	argument "--mode=STANDALONE";
	argument "--initUser=admin";
	argument "--initPassword=adminadminadmin";
	argument "--tokenFile=${workspace_loc}/runtime/token.txt";
	argument "--pool=${workspace_loc}/runtime/master-pool";
}

/**
 * Initialize a new node root.
 */
java configuration Node-Init : minion-base {
	argument "init";
	argument "--root=${workspace_loc}/runtime/node";
	argument "--logData=${workspace_loc}/runtime/node/external";
	argument "--hostname=localhost";
	argument "--port=7702";
	argument "--dist=ignore";
	argument "--nodeIdentFile=${workspace_loc}/runtime/node-ident.txt";
	argument "--mode=NODE";
}

/**
 * Initialize a new master root for a central server
 */
java configuration Central-Init : minion-base {
	argument "init";
	argument "--root=${workspace_loc}/runtime/central";
	argument "--logData=${workspace_loc}/runtime/central/external";
	argument "--hostname=localhost";
	argument "--port=7705";
	argument "--dist=ignore";
	argument "--mode=CENTRAL";
	argument "--initUser=admin";
	argument "--initPassword=adminadminadmin";
}

/**
 * Initialize a new master root for a managed server
 */
java configuration Managed-Init : minion-base {
	argument "init";
	argument "--root=${workspace_loc}/runtime/managed";
	argument "--logData=${workspace_loc}/runtime/managed/external";
	argument "--hostname=localhost";
	argument "--port=7706";
	argument "--dist=ignore";
	argument "--mode=MANAGED";
	argument "--initUser=admin";
	argument "--initPassword=adminadminadmin";
	argument "--tokenFile=${workspace_loc}/runtime/token-managed.txt";
}

/**
 * Initialize a new managed node root.
 */
java configuration Managed-Node-Init : minion-base {
	argument "init";
	argument "--root=${workspace_loc}/runtime/managed-node";
	argument "--logData=${workspace_loc}/runtime/managed-node/external";
	argument "--hostname=localhost";
	argument "--port=7707";
	argument "--dist=ignore";
	argument "--nodeIdentFile=${workspace_loc}/runtime/node-ident-managed.txt";
	argument "--mode=NODE";
}

/**
 * Registers the node with the master root.
 */
java configuration Node-Register : minion-base {
	argument "remote-node";
	argument "--root=${workspace_loc}/runtime/master";
	argument "--add=node";
	argument "--remote=https://localhost:7701/api";
	argument "--tokenFile=${workspace_loc}/runtime/token.txt";
	argument "--nodeIdentFile=${workspace_loc}/runtime/node-ident.txt";
}

/**
 * Removes the node from the master root.
 */
java configuration Node-Remove : minion-base {
	argument "remote-node";
	argument "--remote=https://localhost:7701/api";
	argument "--tokenFile=${workspace_loc}/runtime/token.txt";
	argument "--remove=node";
}

/**
 * Registers the managed node with the managed root.
 */
java configuration Managed-Node-Register : minion-base {
	argument "remote-node";
	argument "--add=node";
	argument "--remote=https://localhost:7706/api";
	argument "--tokenFile=${workspace_loc}/runtime/token-managed.txt";
	argument "--nodeIdentFile=${workspace_loc}/runtime/node-ident-managed.txt";
}

/**
 * Removes the managed node from the managed root.
 */
java configuration Managed-Node-Remove : minion-base {
	argument "remote-node";
	argument "--remote=https://localhost:7706/api";
	argument "--tokenFile=${workspace_loc}/runtime/token-managed.txt";
	argument "--remove=node";
}

/**
 * Run the node.
 */
java configuration Node : minion-base {
	argument "start";
	argument "--root=${workspace_loc}/runtime/node";
	argument "--consoleLog";
//	vm-argument "-Dbdeploy.version.override=4.1.3"; // TESTING
	memory max=256 MB;
}

/**
 * Run the managed node.
 */
java configuration Managed-Node : minion-base {
	argument "start";
	argument "--root=${workspace_loc}/runtime/managed-node";
	argument "--consoleLog";
	memory max=256 MB;
}

/**
 * Launches an interactive shell to type in some commands.
 */
java configuration InteractiveShell : minion-base {
	argument "shell";
}

/**
 * Runs the master on the previously initialized root.
 */
java configuration Master : minion-base {
	argument "start";
	argument "--root=${workspace_loc}/runtime/master";
	argument "--allowCors";
	argument "--consoleLog";
	vm-argument "-XX:+HeapDumpOnOutOfMemoryError";
//	vm-argument "-Dbdeploy.version.override=4.1.3"; // TESTING
	memory max=256 MB;
}

java configuration Master-RelDir : minion-base {
	argument "start";
	argument "--root=../runtime/master";
	argument "--allowCors";
	argument "--consoleLog";
	vm-argument "-XX:+HeapDumpOnOutOfMemoryError";
//	vm-argument "-Dbdeploy.version.override=4.1.3"; // TESTING

	working-dir '${workspace_loc}/runtime';

	memory max=256 MB;
}

java configuration Master-MigrateMode : minion-base {
	argument "config";
	argument "--root=${workspace_loc}/runtime/master";
	argument "--mode=${string_prompt:Target Mode}";
}

/* Plugin related configurations */
java configuration Master-ListPlugins : minion-base {
	argument "remote-plugin";
	argument "--remote=https://localhost:7701/api";
	argument "--tokenFile=${workspace_loc}/runtime/token.txt";
	argument "--list";
}

java configuration Master-AddPlugin : minion-base {
	argument "remote-plugin";
	argument "--remote=https://localhost:7701/api";
	argument "--tokenFile=${workspace_loc}/runtime/token.txt";
	argument "--add=${file_prompt:Plugin JAR}";
}

/**
 * Runs the master in central mode on the previously initialized root.
 */
java configuration Central-Master : minion-base {
	argument "start";
	argument "--root=${workspace_loc}/runtime/central";
	argument "--allowCors";
	argument "--consoleLog";
	vm-argument "-XX:+HeapDumpOnOutOfMemoryError";
//	vm-argument "-Dbdeploy.version.override=3.7.0-202103091811"; // TESTING
	memory max=256 MB;
}

/**
 * Runs the master in managed mode on the previously initialized root.
 */
java configuration Managed-Master : minion-base {
	argument "start";
	argument "--root=${workspace_loc}/runtime/managed";
	argument "--allowCors";
	argument "--consoleLog";
	vm-argument "-XX:+HeapDumpOnOutOfMemoryError";
//	vm-argument "-Dbdeploy.version.override=3.6.2"; // TESTING
//	vm-argument "-Dbdeploy.version.override=3.7.0-202103091811"; // TESTING
	memory max=256 MB;
}

java configuration Launcher {
	project launcher;
	main-class io.bdeploy.launcher.cli.LauncherCli;
	
	working-dir "${workspace_loc}/runtime";
	
	argument "-v";
	argument "launcher";
	argument "--launch=${file_prompt:.bdeploy file to launch}";
	argument "--homeDir=${workspace_loc}/runtime/launcher";
	argument "--consoleLog";
	
//	vm-argument "-Dsun.java2d.debugfonts=true";
//	vm-argument "-Dsun.awt.fontconfig=/tmp/markus.properties";
}

java configuration Browser {
	project launcher;
	main-class io.bdeploy.launcher.cli.LauncherCli;
	
	working-dir "${workspace_loc}/runtime";
	
	argument "-v";
	argument "browser";
	argument "--homeDir=${workspace_loc}/runtime/launcher";
	argument "--consoleLog";
}

java configuration VerifyLauncher : minion-base {
	argument "verify-launcher";
	argument "--executable=${file_prompt:binary to check}";
	memory max=256 MB;
}

java configuration Uninstaller {
	project launcher;
	main-class io.bdeploy.launcher.cli.LauncherCli;
	
	working-dir "${workspace_loc}/runtime";
	
	argument "-v";
	argument "uninstaller";
	argument "--app=${string_prompt:Enter application UID}";
	argument "--homeDir=${workspace_loc}/runtime/launcher";
}

/**
 * Add a new user to the master's user database
 */
java configuration Master-AddUser : minion-base {
	argument "user";
	argument "--admin"; // all users are global admin which are created using this config
	argument "--remote=https://localhost:7701/api";
	argument "--tokenFile=${workspace_loc}/runtime/token.txt";
	argument "--add=${string_prompt:Enter Username}";
	argument "--password=${password_prompt:Enter Password}";
}

/**
 * Add a new user to the central master's user database
 */
java configuration Central-AddUser : minion-base {
	argument "user";
	argument "--admin"; // all users are global admin which are created using this config
	argument "--remote=https://localhost:7705/api";
	argument "--tokenFile=${workspace_loc}/runtime/token-central.txt";
	argument "--add=${string_prompt:Enter Username}";
	argument "--password=${password_prompt:Enter Password}";
}

/**
 * Add a new user to the managed master's user database
 */
java configuration Managed-AddUser : minion-base {
	argument "user";
	argument "--admin"; // all users are global admin which are created using this config
	argument "--remote=https://localhost:7706/api";
	argument "--tokenFile=${workspace_loc}/runtime/token-managed.txt";
	argument "--add=${string_prompt:Enter Username}";
	argument "--password=${password_prompt:Enter Password}";
}

java configuration Master-Product-List : minion-base {
	argument "-v";
	argument "product";
	argument "--list";
	argument "--hive=${folder_prompt:Path to Hive}";
}

java configuration Remote-List-Minions : minion-base {
	argument "remote-master";
	argument "--remote=https://localhost:7701/api";
	argument "--tokenFile=${workspace_loc}/runtime/token.txt";
	argument "--minions";
}

java configuration Remote-Update : minion-base {
	argument "remote-master";
	argument "--yes";
	argument "--remote=https://localhost:7701/api";
	argument "--tokenFile=${file_prompt:Token file to use}";
	argument "--update=${file_prompt:Update package to push}";
}

java configuration NewToken : minion-base {
	argument "token";
	argument "--keystore=${workspace_loc}/runtime/master/etc/private";
	argument "--passphrase=${password_prompt:Enter Password}";
	argument "--create";
}

java configuration Certificate-Update : minion-base {
	argument "certificate";
	argument "--root=${workspace_loc}/runtime/master";
	argument "--update=${file_prompt:Path to certificate PEM}";
}

java configuration Certificate-Export : minion-base {
	argument "certificate";
	argument "--root=${workspace_loc}/runtime/master";
	argument "--export=${file_prompt:Path to export PEM to}";
}

java configuration ProductImport : minion-base {
	argument 'product' '--hive=/ssd/workspaces/deployment/git/deployment/test-data/build/prod2hive' '--imp=/ssd/workspaces/deployment/git/deployment/test-data/test-product-2';
}