abstract java configuration minion-base {
	project minion;
	main-class io.bdeploy.minion.cli.MinionServerCli;
	
	argument "-v";
}

/** Launches the master with a single slave */
group configuration MasterSlave {
	adopt member Slave regex ".*Started.*";
	adopt member Master;
}

/** Launches the central master with a managed master + slave*/
group configuration CentralMasterSlave {
	adopt member Managed-Slave regex ".*Started.*";
	adopt member Managed-Master;
	adopt member Central-Master;
}

/**
 * Initialize a new master root.
 */
java configuration Master-Init : minion-base {
	argument "init";
	argument "--root=${workspace_loc}/runtime/master";
	argument "--hostname=localhost";
	argument "--port=7701";
	argument "--dist=ignore";
	argument "--mode=STANDALONE";
	argument "--initUser=admin";
	argument "--initPassword=admin";
	argument "--tokenFile=${workspace_loc}/runtime/token.txt";
}

/**
 * Initialize a new slave root.
 */
java configuration Slave-Init : minion-base {
	argument "init";
	argument "--root=${workspace_loc}/runtime/slave";
	argument "--hostname=localhost";
	argument "--port=7702";
	argument "--dist=ignore";
	argument "--tokenFile=${workspace_loc}/runtime/token-slave.txt";
	argument "--mode=SLAVE";
}

/**
 * Initialize a new master root for a central server
 */
java configuration Central-Init : minion-base {
	argument "init";
	argument "--root=${workspace_loc}/runtime/central";
	argument "--hostname=localhost";
	argument "--port=7705";
	argument "--dist=ignore";
	argument "--mode=CENTRAL";
	argument "--initUser=admin";
	argument "--initPassword=admin";
}

/**
 * Initialize a new master root for a managed server
 */
java configuration Managed-Init : minion-base {
	argument "init";
	argument "--root=${workspace_loc}/runtime/managed";
	argument "--hostname=localhost";
	argument "--port=7706";
	argument "--dist=ignore";
	argument "--mode=MANAGED";
	argument "--initUser=admin";
	argument "--initPassword=admin";
}

/**
 * Initialize a new managed slave root.
 */
java configuration Managed-Slave-Init : minion-base {
	argument "init";
	argument "--root=${workspace_loc}/runtime/managed-slave";
	argument "--hostname=localhost";
	argument "--port=7707";
	argument "--dist=ignore";
	argument "--tokenFile=${workspace_loc}/runtime/token-managed-slave.txt";
	argument "--mode=SLAVE";
}

/**
 * Registers the slave with the master root.
 */
java configuration Slave-Register : minion-base {
	argument "slave";
	argument "--root=${workspace_loc}/runtime/master";
	argument "--add=slave";
	argument "--remote=https://localhost:7702/api";
	argument "--tokenFile=${workspace_loc}/runtime/token-slave.txt";
}

/**
 * Removes the slave from the master root.
 */
java configuration Slave-Remove : minion-base {
	argument "slave";
	argument "--root=${workspace_loc}/runtime/master";
	argument "--remove=slave";
}

/**
 * Registers the managed slave with the managed root.
 */
java configuration Managed-Slave-Register : minion-base {
	argument "slave";
	argument "--root=${workspace_loc}/runtime/managed";
	argument "--add=slave";
	argument "--remote=https://localhost:7707/api";
	argument "--tokenFile=${workspace_loc}/runtime/token-managed-slave.txt";
}

/**
 * Removes the managed slave from the managed root.
 */
java configuration Managed-Slave-Remove : minion-base {
	argument "slave";
	argument "--root=${workspace_loc}/runtime/managed";
	argument "--remove=slave";
}

/**
 * Run the slave.
 */
java configuration Slave : minion-base {
	argument "slave";
	argument "--root=${workspace_loc}/runtime/slave";
	memory max=256 MB;
}

/**
 * Run the managed slave.
 */
java configuration Managed-Slave : minion-base {
	argument "slave";
	argument "--root=${workspace_loc}/runtime/managed-slave";
	memory max=256 MB;
}

/**
 * Launches an interactive shell to type in some commands.
 */
java configuration InteractiveShell : minion-base {
	argument "shell";
}

/**
 * Runs the master on the previously initialized root.
 */
java configuration Master : minion-base {
	argument "master";
	argument "--root=${workspace_loc}/runtime/master";
	argument "--allowCors";
	vm-argument "-XX:+HeapDumpOnOutOfMemoryError";
	memory max=256 MB;
}

java configuration Master-MigrateMode : minion-base {
	argument "set-mode";
	argument "--root=${workspace_loc}/runtime/master";
	argument "--mode=${string_prompt:Target Mode}";
}

/* Plugin related configurations */
java configuration Master-ListPlugins : minion-base {
	argument "remote-plugin";
	argument "--remote=https://localhost:7701/api";
	argument "--tokenFile=${workspace_loc}/runtime/token.txt";
	argument "--list";
}

java configuration Master-AddPlugin : minion-base {
	argument "remote-plugin";
	argument "--remote=https://localhost:7701/api";
	argument "--tokenFile=${workspace_loc}/runtime/token.txt";
	argument "--add=${file_prompt:Plugin JAR}";
}

/**
 * Runs the master in central mode on the previously initialized root.
 */
java configuration Central-Master : minion-base {
	argument "master";
	argument "--root=${workspace_loc}/runtime/central";
	argument "--allowCors";
	vm-argument "-XX:+HeapDumpOnOutOfMemoryError";
//	vm-argument "-Dbdeploy.version.override=2.0.0"; // TESTING
	memory max=256 MB;
}

/**
 * Runs the master in managed mode on the previously initialized root.
 */
java configuration Managed-Master : minion-base {
	argument "master";
	argument "--root=${workspace_loc}/runtime/managed";
	argument "--allowCors";
	vm-argument "-XX:+HeapDumpOnOutOfMemoryError";
	memory max=256 MB;
}

java configuration Launcher {
	project launcher;
	main-class io.bdeploy.launcher.cli.LauncherCli;
	
	working-dir "${workspace_loc}/runtime";
	
	argument "-v";
	argument "launcher";
	argument "--launch=${file_prompt:.bdeploy file to launch}";
	
//	vm-argument "-Dsun.java2d.debugfonts=true";
//	vm-argument "-Dsun.awt.fontconfig=/tmp/markus.properties";
}

java configuration Uninstaller {
	project launcher;
	main-class io.bdeploy.launcher.cli.LauncherCli;
	
	working-dir "${workspace_loc}/runtime";
	
	argument "-v";
	argument "uninstaller";
	argument "--app=${string_prompt:Enter application UID}";
}

/**
 * Add a new user to the master's user database
 */
java configuration Master-AddUser : minion-base {
	argument "user";
	argument "--admin"; // all users are global admin which are created using this config
	argument "--remote=https://localhost:7701/api";
	argument "--tokenFile=${workspace_loc}/runtime/token.txt";
	argument "--add=${string_prompt:Enter Username}";
	argument "--password=${password_prompt:Enter Password}";
}

/**
 * Add a new user to the central master's user database
 */
java configuration Central-AddUser : minion-base {
	argument "user";
	argument "--admin"; // all users are global admin which are created using this config
	argument "--remote=https://localhost:7705/api";
	argument "--tokenFile=${workspace_loc}/runtime/token-central.txt";
	argument "--add=${string_prompt:Enter Username}";
	argument "--password=${password_prompt:Enter Password}";
}

/**
 * Add a new user to the managed master's user database
 */
java configuration Managed-AddUser : minion-base {
	argument "user";
	argument "--admin"; // all users are global admin which are created using this config
	argument "--remote=https://localhost:7706/api";
	argument "--tokenFile=${workspace_loc}/runtime/token-managed.txt";
	argument "--add=${string_prompt:Enter Username}";
	argument "--password=${password_prompt:Enter Password}";
}

java configuration Master-Product-List : minion-base {
	argument "product";
	argument "--list";
	argument "--hive=${folder_prompt:Path to Hive}";
}

java configuration Remote-List-Minions : minion-base {
	argument "remote-master";
	argument "--remote=https://localhost:7701/api";
	argument "--tokenFile=${workspace_loc}/runtime/token.txt";
	argument "--minions";
}

java configuration Remote-Update : minion-base {
	argument "remote-master";
	argument "--yes";
	argument "--remote=https://localhost:7701/api";
	argument "--tokenFile=${file_prompt:Token file to use}";
	argument "--update=${file_prompt:Update package to push}";
}

java configuration NewToken : minion-base {
	argument "token";
	argument "--keystore=${workspace_loc}/runtime/master/etc/private";
	argument "--passphrase=${password_prompt:Enter Password}";
	argument "--create";
}

java configuration Certificate-Update : minion-base {
	argument "certificate";
	argument "--root=${workspace_loc}/runtime/master";
	argument "--update=${file_prompt:Path to certificate PEM}";
}

java configuration Certificate-Export : minion-base {
	argument "certificate";
	argument "--root=${workspace_loc}/runtime/master";
	argument "--export=${file_prompt:Path to export PEM to}";
}

java configuration ProductImport : minion-base {
	argument 'product' '--hive=/ssd/workspaces/deployment/git/deployment/test-data/build/prod2hive' '--imp=/ssd/workspaces/deployment/git/deployment/test-data/test-product-2';
}