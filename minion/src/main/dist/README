------------------------------------------------------------
BDEPLOY MINION README
------------------------------------------------------------

[0] Installing the bdeploy binaries
[1] Initializing a master root
[2] Initializing a slave root
[3] Registering a slave with the master
[4a] Creating a Linux (systemd) service
[4b] Creating a Windows service
[5] Verify bdeploy setup

------------------------------------------------------------
0. INSTALLING THE MINION BINARIES
------------------------------------------------------------

Extract the bdeploy binaries from the distribution ZIP you
downloaded (which also contains this README). There is no
requirement regarding the location of the binaries. The
target of the unpack will contain a 'bin/bdeploy' or
'bin/bdeploy.bat' depending on whether the distribution is
built for linux (e.g. 'bdeploy-linux64-x.x.x.zip') or windows
(e.g. 'bdeploy-win64-x.x.x.zip').

Keep the source .zip file around, so you can use it during
initialization of the bdeploy master/slave.

For easier handling, make sure the unzipped 'bin' folder
is on the PATH. The rest of the manual assumes you have done
this, otherwise simply prefix all commands with the correct
path to the binaries.

------------------------------------------------------------
1. INITIALIZING A MASTER ROOT
------------------------------------------------------------

To start using BDeploy you will at least need a single master,
which itself is a slave as well (you can deploy applications
to a master). To initialize a root directory (which will
later contain all runtime data, so make sure there is some
room available):

$ bdeploy init --root=/path/to/storage --dist=bdeploy-x.x.x.zip \
    --hostname=$(hostname)

The --dist argument receives the binaries .zip you used to
unpack the binaries from. This argument can explicitly be
set using '--dist=ignore' if you don't have this zip file.
The effect is that this bdeploy will receive a larger (full)
update package once it is updated to another version.

The init command will print a token (you can capture the
token in a file by giving '--tokenFile=token.txt' instead).
You need to copy this token - you will need this to be able
to access this master from a remote server, e.g. a central
remote BDeploy master.

------------------------------------------------------------
2. INITIALIZING A SLAVE ROOT
------------------------------------------------------------

If an additional slave is required, you must initialize
additional roots on the according machines (or on the same
machine using non-default ports; the default port is 7701).

The command is the same as the one used to initialize the
master. Pass (for example) '--port=7702' to change the
default port to some other value to avoid conflicts.
Running multiple bdeploy minions on the same machine is
supported for testing, but not recommended for productive
setups (as the master can be deployed to directly).

Again, the init command will output the root access token
for this slave. You need it to register the slave with the
master, so keep it around or use '--tokenFile=slave.txt' to
store the token into a file.

------------------------------------------------------------
3. REGISTERING A SLAVE WITH THE MASTER
------------------------------------------------------------

To register a slave with the master use this command on the
master's root:

$ bdeploy slave --add=slave-name \
    --root=/path/to/storage \
    --remote=https://slave-host:7702/api \
    --tokenFile=slave.txt # or --token=<PASTED-TOKEN>

NOTE: Both the 'https' (beware the 's') and the '/api'
      suffix are important!

The slave is now registered as 'slave-name'. This is the
name which is reported when querying nodes from the master.
This is also the name displayed when configuring applications
to run on certain nodes later on.

------------------------------------------------------------
4a. CREATING A LINUX (SYSTEMD) SERVICE
------------------------------------------------------------

The bdeploy-linux64-x.x.x.zip package contains a template
file from which a systemd service can be created. It is
located in the 'etc' directory and named 'bdeploy-minion.service'.

The template itself contains instructions on how to create
a valid service from it.

You can copy the service template to a different filename
while installing into the systemd service directory. The
filename will later on be the service name. This allows to
install multiple bdeploy master/slave services on a single
machine.

HINT: to get systemd to recognize the service(s) after
      copying the .service file(s) use the
      'systemctl daemon-reload' command (as root).

Once installed, you can start the service using 'systemctl'.

------------------------------------------------------------
4b. CREATING A WINDOWS SERVICE
------------------------------------------------------------

The bdeploy-win64-x.x.x.zip package contains a batch script
to create a new Windows service. The script is located in 
the etc directory and is named bdeploy-service-install.bat

The script must be called with administrative privileges and it
expects the following arguments:

 --master | --slave     Start a master or slave node
 <Path-to-minion>       Absolute path of the bdeploy executable
 <Path-to-store-files>  Absolute path of the data directory

By default the service runs as 'Local System' but you can
and should change that afterwards by using the services.msc
application. Simply configure the desired account in the 'Log On' 
tab of the services management console.

Once installed, you can start the service using services.msc or
by calling 'net start BDeployMaster | BDeploySlave'.

Hint: Use the 'Event Viewer' (Windows Logs->System) to get more 
information when the service fails to start.

Hint: Application logs (stdout, stderror) are written to a log file
that is stored in <path-to-store-files>\log\service.log

Hint: The service parameters are stored in the Windows registry:
HKLM\SYSTEM\CurrentControlSet\Services\BDeployMaster

Hint: You need to adopt the batch script when you want to create
multiple services on the same machine. Simply adopt the
MINION_SERVICE_PREFIX to use another prefix for the service.

------------------------------------------------------------
5. VERIFY MINION SETUP
------------------------------------------------------------

Make sure that all master and slave services are running on
the according nodes. Start them using 'systemctl start X'
where X is the name of the service file you installed.

To verify that the setup is OK, run on the master:

$ bdeploy remote-master --minions \
    --remote=https://localhost:7701/api
    --tokenFile=token.txt # or --token=<MASTER-TOKEN>

This will privide output like this:

NAME                 STATUS                       START OS         VERSION
master               ONLINE            1/21/19, 4:43 PM LINUX      1.0.0.e32e
slave                OFFLINE

If any of the nodes is offline, the according minion on the
respective node is not reachable from the master node.
